Usage: pkcs15-crypt [OPTIONS]
Options:
      --version                 Print OpenSC package version
  -s, --sign                    Performs digital signature operation
  -c, --decipher                Decipher operation
  -k, --key <arg>               Selects the private key ID to use
  -r, --reader <arg>            Uses reader number <arg>
  -i, --input <arg>             Selects the input file to use (defaults to stdin)
  -o, --output <arg>            Outputs to file <arg> (defaults to stdout)
  -f, --signature-format <arg>  Format for ECDSA signature <arg>: 'rs' (default), 'sequence', 'openssl'
  -R, --raw                     Outputs raw 8 bit data
      --sha-1                   Input file is a SHA-1 hash
      --sha-256                 Input file is a SHA-256 hash
      --sha-384                 Input file is a SHA-384 hash
      --sha-512                 Input file is a SHA-512 hash
      --sha-224                 Input file is a SHA-224 hash
      --md5                     Input file is a MD5 hash
      --pkcs1                   Use PKCS #1 v1.5 padding
  -p, --pin <arg>               Uses password (PIN) <arg> (use - for reading PIN from STDIN)
      --aid <arg>               Specify AID of the on-card PKCS#15 application to be binded to (in hexadecimal form)
  -w, --wait                    Wait for card insertion
  -v, --verbose                 Verbose operation. Use several times to enable debug output.



Usage: pkcs15-tool [OPTIONS]
Options:
      --version                 Print OpenSC package version
      --list-info               List card information
      --list-applications       List the on-card PKCS#15 applications
  -r, --read-certificate <arg>  Read certificate with ID <arg>
  -c, --list-certificates       List certificates
  -R, --read-data-object <arg>  Reads data object with OID, applicationName or label <arg>
      --raw                     Outputs raw 8 bit data to stdout. File output will not be affected by this, it always uses raw mode.
  -C, --list-data-objects       List data objects
      --list-pins               List PIN codes
      --list-secret-keys        List secret keys
  -s, --short                   Output lists in compact format
  -D, --dump                    List all card objects
  -u, --unblock-pin             Unblock PIN code
      --change-pin              Change PIN or PUK code
  -k, --list-keys               List private keys
      --list-public-keys        List public keys
      --read-public-key <arg>   Reads public key with ID <arg>
      --read-ssh-key <arg>      Reads public key with ID <arg>, outputs ssh format
      --rfc4716                 Outputs the public key in RFC 4716 format (requires --read-ssh-key)
  -T, --test-update             Test if the card needs a security update
  -U, --update                  Update the card with a securty update
      --reader <arg>            Uses reader number <arg>
      --pin <arg>               Specify PIN
      --new-pin <arg>           Specify New PIN (when changing or unblocking)
      --puk <arg>               Specify Unblock PIN
      --verify-pin              Verify PIN after card binding (without 'auth-id' the first non-SO, non-Unblock PIN will be verified)
      --test-session-pin        Equivalent to --verify-pin with additional session PIN generation
  -o, --output <arg>            Outputs to file <arg>
      --no-cache                Disable card caching
      --clear-cache             Clear card caching
  -a, --auth-id <arg>           The auth ID of the PIN to use
      --aid <arg>               Specify AID of the on-card PKCS#15 application to bind to (in hexadecimal form)
  -w, --wait                    Wait for card insertion
  -v, --verbose                 Verbose operation. Use several times to enable debug output.
      --use-pinpad              Do not prompt the user; if no PINs supplied, pinpad will be used.



yubico-piv-tool 1.5.0

Usage: yubico-piv-tool [OPTIONS]...

  -h, --help               Print help and exit
      --full-help          Print help, including hidden options, and exit
  -V, --version            Print version and exit
  -v, --verbose[=INT]      Print more information  (default=`0')
  -r, --reader=STRING      Only use a matching reader  (default=`Yubikey')
  -k, --key[=STRING]       Management key to use, if no value is specified key
                             will be asked for
                             (default=`010203040506070801020304050607080102030405060708')
  -a, --action=ENUM        Action to take  (possible values="version",
                             "generate", "set-mgm-key", "reset",
                             "pin-retries", "import-key",
                             "import-certificate", "set-chuid",
                             "request-certificate", "verify-pin",
                             "change-pin", "change-puk", "unblock-pin",
                             "selfsign-certificate", "delete-certificate",
                             "read-certificate", "status",
                             "test-signature", "test-decipher",
                             "list-readers", "set-ccc", "write-object",
                             "read-object", "attest")

       Multiple actions may be given at once and will be executed in order
       for example --action=verify-pin --action=request-certificate

  -s, --slot=ENUM          What key slot to operate on  (possible
                             values="9a", "9c", "9d", "9e", "82",
                             "83", "84", "85", "86", "87", "88",
                             "89", "8a", "8b", "8c", "8d", "8e",
                             "8f", "90", "91", "92", "93", "94",
                             "95", "f9")

       9a is for PIV Authentication
       9c is for Digital Signature (PIN always checked)
       9d is for Key Management
       9e is for Card Authentication (PIN never checked)
       82-95 is for Retired Key Management
       f9 is for Attestation

  -A, --algorithm=ENUM     What algorithm to use  (possible values="RSA1024",
                             "RSA2048", "ECCP256", "ECCP384"
                             default=`RSA2048')
  -H, --hash=ENUM          Hash to use for signatures  (possible
                             values="SHA1", "SHA256", "SHA384",
                             "SHA512" default=`SHA256')
  -n, --new-key=STRING     New management key to use for action set-mgm-key, if
                             omitted key will be asked for
      --pin-retries=INT    Number of retries before the pin code is blocked
      --puk-retries=INT    Number of retries before the puk code is blocked
  -i, --input=STRING       Filename to use as input, - for stdin  (default=`-')
  -o, --output=STRING      Filename to use as output, - for stdout
                             (default=`-')
  -K, --key-format=ENUM    Format of the key being read/written  (possible
                             values="PEM", "PKCS12", "GZIP", "DER",
                             "SSH" default=`PEM')
  -p, --password=STRING    Password for decryption of private key file, if
                             omitted password will be asked for
  -S, --subject=STRING     The subject to use for certificate request

       The subject must be written as:
       /CN=host.example.com/OU=test/O=example.com/

      --serial=INT         Serial number of the self-signed certificate
      --valid-days=INT     Time (in days) until the self-signed certificate
                             expires  (default=`365')
  -P, --pin=STRING         Pin/puk code for verification, if omitted pin/puk
                             will be asked for
  -N, --new-pin=STRING     New pin/puk code for changing, if omitted pin/puk
                             will be asked for
      --pin-policy=ENUM    Set pin policy for action generate or import-key.
                             Only available on YubiKey 4  (possible
                             values="never", "once", "always")
      --touch-policy=ENUM  Set touch policy for action generate, import-key or
                             set-mgm-key. Only available on YubiKey 4
                             (possible values="never", "always",
                             "cached")
      --id=INT             Id of object for write/read object
  -f, --format=ENUM        Format of data for write/read object  (possible
                             values="hex", "base64", "binary"
                             default=`hex')
  